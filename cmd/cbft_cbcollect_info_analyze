#!/usr/bin/env ruby

=begin
Copyright 2016-Present Couchbase, Inc.

Use of this software is governed by the Business Source License included in
the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
file, in accordance with the Business Source License, use of this software will
be governed by the Apache License, Version 2.0, included in the file
licenses/APL2.txt.
=end

require 'json'

usage = <<-eos
Usage...
  ./cbft_cbcollect_info_analyze CMD <OPTIONS>

Valid CMD's include...
  help | h | usage | ?
    Prints this help message and exits.

  extract NAME DIRECTORY[ DIRECTORY]
    - NAME is an FTS related log item, like "/api/diag".
    - DIRECTORY is a cbcollect_info directory (unzipped).

    The extract command extracts the named cbft-related data from the
    cbcollect_info directories (unzipped).

    For example, to see cbft's goroutine stacks, you might pipe the
    output to jq...

     ./cbft_cbcollect_info_analyze extract /api/diag \\
       $DIRECTORY $DIRECTORY $DIRECTORY | \\
       jq '.["/debug/pprof/goroutine?debug=2"]? | split("\\n")'

   To extract the bucketDataSourceStats, for example, try...

    ./cbft_cbcollect_info_analyze extract /api/diag \\
      $DIRECTORY $DIRECTORY $DIRECTORY | \\
      jq '.["/api/stats"]?["feeds"]?[]?["bucketDataSourceStats"]?'
eos

if ARGV.length <= 0
  print "error: missing CMD.\n\n"
  print "#{usage}\n"
  exit 2
end

# ---------------------------------------------------------------

# Returns a part of a file (such as from a couchbase.log).
def fetch_file_part(path, fname, part_separator, part_prefix)
  parts = IO.read("#{path}/#{fname}").split(part_separator)

  parts.each_with_index do |part, i|
    if part.start_with?(part_prefix)
      return parts[i+1]
    end
  end

  return nil
end

$cmd_extract_params = {
  "/api/diag" => {
    :file => "couchbase.log",
    :part_separator => /=============+\n/,
    :part_prefix => "FTS /api/diag:"
  },
}

def cmd_extract(argv)
  if argv.length < 3
    print "error: the extract CMD needs at least 2 params:\n\n"
    print "  extract NAME DIRECTORY[ DIRECTORY]\n\n"
    print "  supported NAME's include...\n"
    $cmd_extract_params.each_key do |key|
      print "  - \"#{key}\"\n"
    end
    print "\n"
    return 2
  end

  params = $cmd_extract_params[argv[1]]
  unless params
    print "error: unsupported extract NAME param: \"#{argv[1]}\"\n"
    return 2
  end

  paths = argv[2..-1]

  paths.each do |path|
    # The path is directory of cbcollect_info (the unzipped files).
    begin
      part_s = fetch_file_part(path,
                               params[:file],
                               params[:part_separator],
                               params[:part_prefix])
      if part_s
        part_j = JSON.parse(part_s)
        print JSON.generate(part_j)
        print "\n"
      end
    rescue JSON::ParserError, JSON::GeneratorError, TypeError => err
      print JSON.generate({"err" => err.to_s, "part_s" => part_s})
      print "\n"
    end
  end

  return 0
end

# ---------------------------------------------------------------

if not ["help", "h", "-h", "--h", "usage", "?", "-?"].index(ARGV[0]).nil?
  print "#{usage}\n"
  exit 0
end

if ARGV[0] == 'extract'
  exit cmd_extract(ARGV)
end

print "error: unknown CMD: #{ARGV[0]}\n"
exit 1
