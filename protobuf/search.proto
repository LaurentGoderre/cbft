/*
Copyright 2019-Present Couchbase, Inc.

Use of this software is governed by the Business Source License included in
the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
file, in accordance with the Business Source License, use of this software will
be governed by the Apache License, Version 2.0, included in the file
licenses/APL2.txt.
*/

syntax = "proto3";
package search;


service SearchService {
	// external rpcs, for rpc clients
	rpc Search(SearchRequest) returns (stream StreamSearchResults);

	rpc Check(HealthCheckRequest) returns (HealthCheckResponse);

	rpc DocCount(DocCountRequest) returns (DocCountResult);
}

message HealthCheckRequest {
	string service = 1;
}

message HealthCheckResponse {
	enum ServingStatus {
		UNKNOWN = 0;
		SERVING = 1;
		NOT_SERVING = 2;
	}
	ServingStatus status = 1;
}

message DocCountRequest {
	string IndexName = 1;
	string IndexUUID = 2;
}

message DocCountResult {
	int64 DocCount = 1;
}

// Key is partition or partition/partitionUUID.  Value is seq.
// For example, a DCP data source might have the key as either
// "vbucketId" or "vbucketId/vbucketUUID".
message ConsistencyVectors {
    map<string, uint64> ConsistencyVector = 1;
}

// ConsistencyParams represent the consistency requirements of a
// client's request.
message ConsistencyParams  {
	// A Level value of "" means stale is ok; "at_plus" means we need
	// consistency at least at or beyond the consistency vector but
	// not before.
	string Level = 1;

	// Keyed by indexName.
	map<string,ConsistencyVectors> Vectors = 2;

	string Results = 3;
}

// QueryCtl defines the JSON parameters that control query execution
// and which are independent of any specific pindex type.
message QueryCtl  {
	int64 Timeout = 1;
	ConsistencyParams Consistency = 2;
	string PartitionSelection = 3;
}

// QueryCtlParams defines the JSON that includes the "ctl" part of a
// query request.  These "ctl" query request parameters are
// independent of any specific pindex type.
message QueryCtlParams {
	QueryCtl Ctl = 1;
}

message QueryPIndexes {
	// An empty or nil PIndexNames means the query should use all
	// the pindexes of the index.
	repeated string PIndexNames = 1;
}

message SearchRequest {
	bytes Contents = 1;
	string IndexName = 2;
	string IndexUUID = 3;
	bool Stream = 4;
	bytes QueryCtlParams = 5;
	bytes QueryPIndexes = 6;
}

message SearchResult {
	bytes Contents = 1;
}

// A stream SearchResult describes the streaming results
// of executing a SearchRequest.
message StreamSearchResults  {
	message Batch {
		bytes Bytes = 1;
		repeated uint64 Offsets = 2;
		uint64 Total = 3;
	}

	oneof Contents {
		Batch Hits = 1;
		bytes SearchResult = 2;
	}
}
