/*
Copyright 2019-Present Couchbase, Inc.

Use of this software is governed by the Business Source License included in
the file licenses/BSL-Couchbase.txt.  As of the Change Date specified in that
file, in accordance with the Business Source License, use of this software will
be governed by the Apache License, Version 2.0, included in the file
licenses/APL2.txt.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: search.proto

package search

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HealthCheckResponse_ServingStatus int32

const (
	HealthCheckResponse_UNKNOWN     HealthCheckResponse_ServingStatus = 0
	HealthCheckResponse_SERVING     HealthCheckResponse_ServingStatus = 1
	HealthCheckResponse_NOT_SERVING HealthCheckResponse_ServingStatus = 2
)

var HealthCheckResponse_ServingStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "SERVING",
	2: "NOT_SERVING",
}

var HealthCheckResponse_ServingStatus_value = map[string]int32{
	"UNKNOWN":     0,
	"SERVING":     1,
	"NOT_SERVING": 2,
}

func (x HealthCheckResponse_ServingStatus) String() string {
	return proto.EnumName(HealthCheckResponse_ServingStatus_name, int32(x))
}

func (HealthCheckResponse_ServingStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1, 0}
}

type HealthCheckRequest struct {
	Service              string   `protobuf:"bytes,1,opt,name=service,proto3" json:"service,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HealthCheckRequest) Reset()         { *m = HealthCheckRequest{} }
func (m *HealthCheckRequest) String() string { return proto.CompactTextString(m) }
func (*HealthCheckRequest) ProtoMessage()    {}
func (*HealthCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{0}
}

func (m *HealthCheckRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckRequest.Unmarshal(m, b)
}
func (m *HealthCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckRequest.Marshal(b, m, deterministic)
}
func (m *HealthCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckRequest.Merge(m, src)
}
func (m *HealthCheckRequest) XXX_Size() int {
	return xxx_messageInfo_HealthCheckRequest.Size(m)
}
func (m *HealthCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckRequest proto.InternalMessageInfo

func (m *HealthCheckRequest) GetService() string {
	if m != nil {
		return m.Service
	}
	return ""
}

type HealthCheckResponse struct {
	Status               HealthCheckResponse_ServingStatus `protobuf:"varint,1,opt,name=status,proto3,enum=search.HealthCheckResponse_ServingStatus" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                          `json:"-"`
	XXX_unrecognized     []byte                            `json:"-"`
	XXX_sizecache        int32                             `json:"-"`
}

func (m *HealthCheckResponse) Reset()         { *m = HealthCheckResponse{} }
func (m *HealthCheckResponse) String() string { return proto.CompactTextString(m) }
func (*HealthCheckResponse) ProtoMessage()    {}
func (*HealthCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{1}
}

func (m *HealthCheckResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HealthCheckResponse.Unmarshal(m, b)
}
func (m *HealthCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HealthCheckResponse.Marshal(b, m, deterministic)
}
func (m *HealthCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HealthCheckResponse.Merge(m, src)
}
func (m *HealthCheckResponse) XXX_Size() int {
	return xxx_messageInfo_HealthCheckResponse.Size(m)
}
func (m *HealthCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_HealthCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_HealthCheckResponse proto.InternalMessageInfo

func (m *HealthCheckResponse) GetStatus() HealthCheckResponse_ServingStatus {
	if m != nil {
		return m.Status
	}
	return HealthCheckResponse_UNKNOWN
}

type DocCountRequest struct {
	IndexName            string   `protobuf:"bytes,1,opt,name=IndexName,proto3" json:"IndexName,omitempty"`
	IndexUUID            string   `protobuf:"bytes,2,opt,name=IndexUUID,proto3" json:"IndexUUID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DocCountRequest) Reset()         { *m = DocCountRequest{} }
func (m *DocCountRequest) String() string { return proto.CompactTextString(m) }
func (*DocCountRequest) ProtoMessage()    {}
func (*DocCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{2}
}

func (m *DocCountRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DocCountRequest.Unmarshal(m, b)
}
func (m *DocCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DocCountRequest.Marshal(b, m, deterministic)
}
func (m *DocCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocCountRequest.Merge(m, src)
}
func (m *DocCountRequest) XXX_Size() int {
	return xxx_messageInfo_DocCountRequest.Size(m)
}
func (m *DocCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DocCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DocCountRequest proto.InternalMessageInfo

func (m *DocCountRequest) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *DocCountRequest) GetIndexUUID() string {
	if m != nil {
		return m.IndexUUID
	}
	return ""
}

type DocCountResult struct {
	DocCount             int64    `protobuf:"varint,1,opt,name=DocCount,proto3" json:"DocCount,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DocCountResult) Reset()         { *m = DocCountResult{} }
func (m *DocCountResult) String() string { return proto.CompactTextString(m) }
func (*DocCountResult) ProtoMessage()    {}
func (*DocCountResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{3}
}

func (m *DocCountResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DocCountResult.Unmarshal(m, b)
}
func (m *DocCountResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DocCountResult.Marshal(b, m, deterministic)
}
func (m *DocCountResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocCountResult.Merge(m, src)
}
func (m *DocCountResult) XXX_Size() int {
	return xxx_messageInfo_DocCountResult.Size(m)
}
func (m *DocCountResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DocCountResult.DiscardUnknown(m)
}

var xxx_messageInfo_DocCountResult proto.InternalMessageInfo

func (m *DocCountResult) GetDocCount() int64 {
	if m != nil {
		return m.DocCount
	}
	return 0
}

// Key is partition or partition/partitionUUID.  Value is seq.
// For example, a DCP data source might have the key as either
// "vbucketId" or "vbucketId/vbucketUUID".
type ConsistencyVectors struct {
	ConsistencyVector    map[string]uint64 `protobuf:"bytes,1,rep,name=ConsistencyVector,proto3" json:"ConsistencyVector,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *ConsistencyVectors) Reset()         { *m = ConsistencyVectors{} }
func (m *ConsistencyVectors) String() string { return proto.CompactTextString(m) }
func (*ConsistencyVectors) ProtoMessage()    {}
func (*ConsistencyVectors) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{4}
}

func (m *ConsistencyVectors) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsistencyVectors.Unmarshal(m, b)
}
func (m *ConsistencyVectors) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsistencyVectors.Marshal(b, m, deterministic)
}
func (m *ConsistencyVectors) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsistencyVectors.Merge(m, src)
}
func (m *ConsistencyVectors) XXX_Size() int {
	return xxx_messageInfo_ConsistencyVectors.Size(m)
}
func (m *ConsistencyVectors) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsistencyVectors.DiscardUnknown(m)
}

var xxx_messageInfo_ConsistencyVectors proto.InternalMessageInfo

func (m *ConsistencyVectors) GetConsistencyVector() map[string]uint64 {
	if m != nil {
		return m.ConsistencyVector
	}
	return nil
}

// ConsistencyParams represent the consistency requirements of a
// client's request.
type ConsistencyParams struct {
	// A Level value of "" means stale is ok; "at_plus" means we need
	// consistency at least at or beyond the consistency vector but
	// not before.
	Level string `protobuf:"bytes,1,opt,name=Level,proto3" json:"Level,omitempty"`
	// Keyed by indexName.
	Vectors              map[string]*ConsistencyVectors `protobuf:"bytes,2,rep,name=Vectors,proto3" json:"Vectors,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Results              string                         `protobuf:"bytes,3,opt,name=Results,proto3" json:"Results,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *ConsistencyParams) Reset()         { *m = ConsistencyParams{} }
func (m *ConsistencyParams) String() string { return proto.CompactTextString(m) }
func (*ConsistencyParams) ProtoMessage()    {}
func (*ConsistencyParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{5}
}

func (m *ConsistencyParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConsistencyParams.Unmarshal(m, b)
}
func (m *ConsistencyParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConsistencyParams.Marshal(b, m, deterministic)
}
func (m *ConsistencyParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsistencyParams.Merge(m, src)
}
func (m *ConsistencyParams) XXX_Size() int {
	return xxx_messageInfo_ConsistencyParams.Size(m)
}
func (m *ConsistencyParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsistencyParams.DiscardUnknown(m)
}

var xxx_messageInfo_ConsistencyParams proto.InternalMessageInfo

func (m *ConsistencyParams) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *ConsistencyParams) GetVectors() map[string]*ConsistencyVectors {
	if m != nil {
		return m.Vectors
	}
	return nil
}

func (m *ConsistencyParams) GetResults() string {
	if m != nil {
		return m.Results
	}
	return ""
}

// QueryCtl defines the JSON parameters that control query execution
// and which are independent of any specific pindex type.
type QueryCtl struct {
	Timeout              int64              `protobuf:"varint,1,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	Consistency          *ConsistencyParams `protobuf:"bytes,2,opt,name=Consistency,proto3" json:"Consistency,omitempty"`
	PartitionSelection   string             `protobuf:"bytes,3,opt,name=PartitionSelection,proto3" json:"PartitionSelection,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *QueryCtl) Reset()         { *m = QueryCtl{} }
func (m *QueryCtl) String() string { return proto.CompactTextString(m) }
func (*QueryCtl) ProtoMessage()    {}
func (*QueryCtl) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{6}
}

func (m *QueryCtl) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryCtl.Unmarshal(m, b)
}
func (m *QueryCtl) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryCtl.Marshal(b, m, deterministic)
}
func (m *QueryCtl) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCtl.Merge(m, src)
}
func (m *QueryCtl) XXX_Size() int {
	return xxx_messageInfo_QueryCtl.Size(m)
}
func (m *QueryCtl) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCtl.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCtl proto.InternalMessageInfo

func (m *QueryCtl) GetTimeout() int64 {
	if m != nil {
		return m.Timeout
	}
	return 0
}

func (m *QueryCtl) GetConsistency() *ConsistencyParams {
	if m != nil {
		return m.Consistency
	}
	return nil
}

func (m *QueryCtl) GetPartitionSelection() string {
	if m != nil {
		return m.PartitionSelection
	}
	return ""
}

// QueryCtlParams defines the JSON that includes the "ctl" part of a
// query request.  These "ctl" query request parameters are
// independent of any specific pindex type.
type QueryCtlParams struct {
	Ctl                  *QueryCtl `protobuf:"bytes,1,opt,name=Ctl,proto3" json:"Ctl,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *QueryCtlParams) Reset()         { *m = QueryCtlParams{} }
func (m *QueryCtlParams) String() string { return proto.CompactTextString(m) }
func (*QueryCtlParams) ProtoMessage()    {}
func (*QueryCtlParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{7}
}

func (m *QueryCtlParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryCtlParams.Unmarshal(m, b)
}
func (m *QueryCtlParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryCtlParams.Marshal(b, m, deterministic)
}
func (m *QueryCtlParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCtlParams.Merge(m, src)
}
func (m *QueryCtlParams) XXX_Size() int {
	return xxx_messageInfo_QueryCtlParams.Size(m)
}
func (m *QueryCtlParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCtlParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCtlParams proto.InternalMessageInfo

func (m *QueryCtlParams) GetCtl() *QueryCtl {
	if m != nil {
		return m.Ctl
	}
	return nil
}

type QueryPIndexes struct {
	// An empty or nil PIndexNames means the query should use all
	// the pindexes of the index.
	PIndexNames          []string `protobuf:"bytes,1,rep,name=PIndexNames,proto3" json:"PIndexNames,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *QueryPIndexes) Reset()         { *m = QueryPIndexes{} }
func (m *QueryPIndexes) String() string { return proto.CompactTextString(m) }
func (*QueryPIndexes) ProtoMessage()    {}
func (*QueryPIndexes) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{8}
}

func (m *QueryPIndexes) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_QueryPIndexes.Unmarshal(m, b)
}
func (m *QueryPIndexes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_QueryPIndexes.Marshal(b, m, deterministic)
}
func (m *QueryPIndexes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPIndexes.Merge(m, src)
}
func (m *QueryPIndexes) XXX_Size() int {
	return xxx_messageInfo_QueryPIndexes.Size(m)
}
func (m *QueryPIndexes) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPIndexes.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPIndexes proto.InternalMessageInfo

func (m *QueryPIndexes) GetPIndexNames() []string {
	if m != nil {
		return m.PIndexNames
	}
	return nil
}

type SearchRequest struct {
	Contents             []byte   `protobuf:"bytes,1,opt,name=Contents,proto3" json:"Contents,omitempty"`
	IndexName            string   `protobuf:"bytes,2,opt,name=IndexName,proto3" json:"IndexName,omitempty"`
	IndexUUID            string   `protobuf:"bytes,3,opt,name=IndexUUID,proto3" json:"IndexUUID,omitempty"`
	Stream               bool     `protobuf:"varint,4,opt,name=Stream,proto3" json:"Stream,omitempty"`
	QueryCtlParams       []byte   `protobuf:"bytes,5,opt,name=QueryCtlParams,proto3" json:"QueryCtlParams,omitempty"`
	QueryPIndexes        []byte   `protobuf:"bytes,6,opt,name=QueryPIndexes,proto3" json:"QueryPIndexes,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchRequest) Reset()         { *m = SearchRequest{} }
func (m *SearchRequest) String() string { return proto.CompactTextString(m) }
func (*SearchRequest) ProtoMessage()    {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{9}
}

func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchRequest.Unmarshal(m, b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return xxx_messageInfo_SearchRequest.Size(m)
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *SearchRequest) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *SearchRequest) GetIndexUUID() string {
	if m != nil {
		return m.IndexUUID
	}
	return ""
}

func (m *SearchRequest) GetStream() bool {
	if m != nil {
		return m.Stream
	}
	return false
}

func (m *SearchRequest) GetQueryCtlParams() []byte {
	if m != nil {
		return m.QueryCtlParams
	}
	return nil
}

func (m *SearchRequest) GetQueryPIndexes() []byte {
	if m != nil {
		return m.QueryPIndexes
	}
	return nil
}

type SearchResult struct {
	Contents             []byte   `protobuf:"bytes,1,opt,name=Contents,proto3" json:"Contents,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SearchResult) Reset()         { *m = SearchResult{} }
func (m *SearchResult) String() string { return proto.CompactTextString(m) }
func (*SearchResult) ProtoMessage()    {}
func (*SearchResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{10}
}

func (m *SearchResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchResult.Unmarshal(m, b)
}
func (m *SearchResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchResult.Marshal(b, m, deterministic)
}
func (m *SearchResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchResult.Merge(m, src)
}
func (m *SearchResult) XXX_Size() int {
	return xxx_messageInfo_SearchResult.Size(m)
}
func (m *SearchResult) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchResult.DiscardUnknown(m)
}

var xxx_messageInfo_SearchResult proto.InternalMessageInfo

func (m *SearchResult) GetContents() []byte {
	if m != nil {
		return m.Contents
	}
	return nil
}

// A stream SearchResult describes the streaming results
// of executing a SearchRequest.
type StreamSearchResults struct {
	// Types that are valid to be assigned to Contents:
	//	*StreamSearchResults_Hits
	//	*StreamSearchResults_SearchResult
	Contents             isStreamSearchResults_Contents `protobuf_oneof:"Contents"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *StreamSearchResults) Reset()         { *m = StreamSearchResults{} }
func (m *StreamSearchResults) String() string { return proto.CompactTextString(m) }
func (*StreamSearchResults) ProtoMessage()    {}
func (*StreamSearchResults) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{11}
}

func (m *StreamSearchResults) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamSearchResults.Unmarshal(m, b)
}
func (m *StreamSearchResults) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamSearchResults.Marshal(b, m, deterministic)
}
func (m *StreamSearchResults) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamSearchResults.Merge(m, src)
}
func (m *StreamSearchResults) XXX_Size() int {
	return xxx_messageInfo_StreamSearchResults.Size(m)
}
func (m *StreamSearchResults) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamSearchResults.DiscardUnknown(m)
}

var xxx_messageInfo_StreamSearchResults proto.InternalMessageInfo

type isStreamSearchResults_Contents interface {
	isStreamSearchResults_Contents()
}

type StreamSearchResults_Hits struct {
	Hits *StreamSearchResults_Batch `protobuf:"bytes,1,opt,name=Hits,proto3,oneof"`
}

type StreamSearchResults_SearchResult struct {
	SearchResult []byte `protobuf:"bytes,2,opt,name=SearchResult,proto3,oneof"`
}

func (*StreamSearchResults_Hits) isStreamSearchResults_Contents() {}

func (*StreamSearchResults_SearchResult) isStreamSearchResults_Contents() {}

func (m *StreamSearchResults) GetContents() isStreamSearchResults_Contents {
	if m != nil {
		return m.Contents
	}
	return nil
}

func (m *StreamSearchResults) GetHits() *StreamSearchResults_Batch {
	if x, ok := m.GetContents().(*StreamSearchResults_Hits); ok {
		return x.Hits
	}
	return nil
}

func (m *StreamSearchResults) GetSearchResult() []byte {
	if x, ok := m.GetContents().(*StreamSearchResults_SearchResult); ok {
		return x.SearchResult
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*StreamSearchResults) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _StreamSearchResults_OneofMarshaler, _StreamSearchResults_OneofUnmarshaler, _StreamSearchResults_OneofSizer, []interface{}{
		(*StreamSearchResults_Hits)(nil),
		(*StreamSearchResults_SearchResult)(nil),
	}
}

func _StreamSearchResults_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*StreamSearchResults)
	// Contents
	switch x := m.Contents.(type) {
	case *StreamSearchResults_Hits:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hits); err != nil {
			return err
		}
	case *StreamSearchResults_SearchResult:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.SearchResult)
	case nil:
	default:
		return fmt.Errorf("StreamSearchResults.Contents has unexpected type %T", x)
	}
	return nil
}

func _StreamSearchResults_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*StreamSearchResults)
	switch tag {
	case 1: // Contents.Hits
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(StreamSearchResults_Batch)
		err := b.DecodeMessage(msg)
		m.Contents = &StreamSearchResults_Hits{msg}
		return true, err
	case 2: // Contents.SearchResult
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Contents = &StreamSearchResults_SearchResult{x}
		return true, err
	default:
		return false, nil
	}
}

func _StreamSearchResults_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*StreamSearchResults)
	// Contents
	switch x := m.Contents.(type) {
	case *StreamSearchResults_Hits:
		s := proto.Size(x.Hits)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *StreamSearchResults_SearchResult:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.SearchResult)))
		n += len(x.SearchResult)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type StreamSearchResults_Batch struct {
	Bytes                []byte   `protobuf:"bytes,1,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	Offsets              []uint64 `protobuf:"varint,2,rep,packed,name=Offsets,proto3" json:"Offsets,omitempty"`
	Total                uint64   `protobuf:"varint,3,opt,name=Total,proto3" json:"Total,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamSearchResults_Batch) Reset()         { *m = StreamSearchResults_Batch{} }
func (m *StreamSearchResults_Batch) String() string { return proto.CompactTextString(m) }
func (*StreamSearchResults_Batch) ProtoMessage()    {}
func (*StreamSearchResults_Batch) Descriptor() ([]byte, []int) {
	return fileDescriptor_453745cff914010e, []int{11, 0}
}

func (m *StreamSearchResults_Batch) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamSearchResults_Batch.Unmarshal(m, b)
}
func (m *StreamSearchResults_Batch) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamSearchResults_Batch.Marshal(b, m, deterministic)
}
func (m *StreamSearchResults_Batch) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamSearchResults_Batch.Merge(m, src)
}
func (m *StreamSearchResults_Batch) XXX_Size() int {
	return xxx_messageInfo_StreamSearchResults_Batch.Size(m)
}
func (m *StreamSearchResults_Batch) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamSearchResults_Batch.DiscardUnknown(m)
}

var xxx_messageInfo_StreamSearchResults_Batch proto.InternalMessageInfo

func (m *StreamSearchResults_Batch) GetBytes() []byte {
	if m != nil {
		return m.Bytes
	}
	return nil
}

func (m *StreamSearchResults_Batch) GetOffsets() []uint64 {
	if m != nil {
		return m.Offsets
	}
	return nil
}

func (m *StreamSearchResults_Batch) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func init() {
	proto.RegisterEnum("search.HealthCheckResponse_ServingStatus", HealthCheckResponse_ServingStatus_name, HealthCheckResponse_ServingStatus_value)
	proto.RegisterType((*HealthCheckRequest)(nil), "search.HealthCheckRequest")
	proto.RegisterType((*HealthCheckResponse)(nil), "search.HealthCheckResponse")
	proto.RegisterType((*DocCountRequest)(nil), "search.DocCountRequest")
	proto.RegisterType((*DocCountResult)(nil), "search.DocCountResult")
	proto.RegisterType((*ConsistencyVectors)(nil), "search.ConsistencyVectors")
	proto.RegisterMapType((map[string]uint64)(nil), "search.ConsistencyVectors.ConsistencyVectorEntry")
	proto.RegisterType((*ConsistencyParams)(nil), "search.ConsistencyParams")
	proto.RegisterMapType((map[string]*ConsistencyVectors)(nil), "search.ConsistencyParams.VectorsEntry")
	proto.RegisterType((*QueryCtl)(nil), "search.QueryCtl")
	proto.RegisterType((*QueryCtlParams)(nil), "search.QueryCtlParams")
	proto.RegisterType((*QueryPIndexes)(nil), "search.QueryPIndexes")
	proto.RegisterType((*SearchRequest)(nil), "search.SearchRequest")
	proto.RegisterType((*SearchResult)(nil), "search.SearchResult")
	proto.RegisterType((*StreamSearchResults)(nil), "search.StreamSearchResults")
	proto.RegisterType((*StreamSearchResults_Batch)(nil), "search.StreamSearchResults.Batch")
}

func init() { proto.RegisterFile("search.proto", fileDescriptor_453745cff914010e) }

var fileDescriptor_453745cff914010e = []byte{
	// 703 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xed, 0x4e, 0x13, 0x4d,
	0x14, 0x66, 0xfb, 0x45, 0x39, 0x5b, 0xa0, 0xef, 0xf0, 0x8a, 0xeb, 0xea, 0x8f, 0x3a, 0x21, 0x04,
	0x8d, 0xd9, 0x40, 0x35, 0xd1, 0x40, 0x62, 0x90, 0x42, 0x2c, 0x51, 0x4a, 0x9d, 0x02, 0xfe, 0x24,
	0xeb, 0x3a, 0xd8, 0x86, 0xed, 0x2e, 0xee, 0xcc, 0x12, 0x7b, 0x19, 0x26, 0xde, 0x8d, 0xd7, 0xa0,
	0x5e, 0x81, 0xf7, 0x62, 0x66, 0x66, 0xa7, 0xdd, 0x6d, 0xb7, 0xfc, 0xdb, 0xe7, 0x7c, 0x3f, 0x67,
	0xce, 0x39, 0x0b, 0x35, 0x46, 0xdd, 0xc8, 0xeb, 0x3b, 0x37, 0x51, 0xc8, 0x43, 0x54, 0x51, 0x08,
	0x3b, 0x80, 0xda, 0xd4, 0xf5, 0x79, 0xbf, 0xd5, 0xa7, 0xde, 0x35, 0xa1, 0x5f, 0x63, 0xca, 0x38,
	0xb2, 0x60, 0x91, 0xd1, 0xe8, 0x76, 0xe0, 0x51, 0xcb, 0x68, 0x18, 0x5b, 0x4b, 0x44, 0x43, 0xfc,
	0xc3, 0x80, 0xb5, 0x8c, 0x03, 0xbb, 0x09, 0x03, 0x46, 0xd1, 0x1b, 0xa8, 0x30, 0xee, 0xf2, 0x98,
	0x49, 0x87, 0x95, 0xe6, 0x13, 0x27, 0x49, 0x97, 0x63, 0xec, 0xf4, 0x44, 0xb0, 0xe0, 0x4b, 0x4f,
	0x3a, 0x90, 0xc4, 0x11, 0xef, 0xc2, 0x72, 0x46, 0x81, 0x4c, 0x58, 0x3c, 0xef, 0xbc, 0xeb, 0x9c,
	0x7e, 0xec, 0xd4, 0x17, 0x04, 0xe8, 0x1d, 0x91, 0x8b, 0xe3, 0xce, 0xdb, 0xba, 0x81, 0x56, 0xc1,
	0xec, 0x9c, 0x9e, 0x5d, 0x6a, 0x41, 0x01, 0x9f, 0xc0, 0xea, 0x61, 0xe8, 0xb5, 0xc2, 0x38, 0xe0,
	0x9a, 0xc3, 0x23, 0x58, 0x3a, 0x0e, 0x3e, 0xd3, 0x6f, 0x1d, 0x77, 0xa8, 0x59, 0x4c, 0x04, 0x63,
	0xed, 0xf9, 0xf9, 0xf1, 0xa1, 0x55, 0x48, 0x69, 0x85, 0x00, 0x3f, 0x83, 0x95, 0x49, 0x38, 0x16,
	0xfb, 0x1c, 0xd9, 0x50, 0xd5, 0x12, 0x19, 0xac, 0x48, 0xc6, 0x18, 0xff, 0x34, 0x00, 0xb5, 0xc2,
	0x80, 0x0d, 0x18, 0xa7, 0x81, 0x37, 0xba, 0xa0, 0x1e, 0x0f, 0x23, 0x86, 0x2e, 0xe1, 0xbf, 0x19,
	0xa9, 0x65, 0x34, 0x8a, 0x5b, 0x66, 0x73, 0x47, 0x77, 0x67, 0xd6, 0x6d, 0x56, 0x74, 0x14, 0xf0,
	0x68, 0x44, 0x66, 0x63, 0xd9, 0x87, 0xb0, 0x9e, 0x6f, 0x8c, 0xea, 0x50, 0xbc, 0xa6, 0xa3, 0x84,
	0xb5, 0xf8, 0x44, 0xff, 0x43, 0xf9, 0xd6, 0xf5, 0x63, 0x2a, 0xb9, 0x96, 0x88, 0x02, 0xbb, 0x85,
	0x57, 0x06, 0xfe, 0x6b, 0x64, 0xea, 0xec, 0xba, 0x91, 0x3b, 0x64, 0xc2, 0xfe, 0x3d, 0xbd, 0xa5,
	0x7e, 0x12, 0x43, 0x01, 0xb4, 0x0f, 0x8b, 0x49, 0x99, 0x56, 0x41, 0x12, 0xd9, 0xcc, 0x21, 0xa2,
	0x22, 0x38, 0x89, 0xa1, 0xaa, 0x5e, 0xbb, 0x89, 0xc9, 0x52, 0x1d, 0x65, 0x56, 0x51, 0x4d, 0x56,
	0x02, 0xed, 0x0b, 0xa8, 0xa5, 0x5d, 0x72, 0x38, 0x6c, 0xa7, 0x39, 0x98, 0x4d, 0x7b, 0x7e, 0x13,
	0xd3, 0xfc, 0xbe, 0x1b, 0x50, 0xfd, 0x10, 0xd3, 0x68, 0xd4, 0xe2, 0xbe, 0x48, 0x7f, 0x36, 0x18,
	0xd2, 0x30, 0xd6, 0xaf, 0xa8, 0x21, 0xda, 0x03, 0x33, 0x15, 0x27, 0x49, 0xf1, 0x60, 0x2e, 0x3d,
	0x92, 0xb6, 0x46, 0x0e, 0xa0, 0xae, 0x1b, 0xf1, 0x01, 0x1f, 0x84, 0x41, 0x8f, 0xfa, 0xd4, 0x13,
	0x1f, 0x09, 0xc1, 0x1c, 0x0d, 0x7e, 0x01, 0x2b, 0xba, 0xa4, 0xa4, 0xdf, 0x18, 0x8a, 0x2d, 0xae,
	0xba, 0x6d, 0x36, 0xeb, 0x3a, 0xad, 0x36, 0x22, 0x42, 0x89, 0x77, 0x60, 0x59, 0x0a, 0xba, 0x72,
	0x50, 0x29, 0x43, 0x0d, 0x30, 0xbb, 0xe3, 0x91, 0x66, 0x72, 0xb6, 0x96, 0x48, 0x5a, 0x84, 0x7f,
	0x19, 0x62, 0xa9, 0x44, 0x2c, 0xbd, 0x16, 0x36, 0x54, 0x5b, 0x61, 0xc0, 0x69, 0xc0, 0xd5, 0xaa,
	0xd6, 0xc8, 0x18, 0x67, 0x57, 0xa6, 0x70, 0xe7, 0xca, 0x14, 0xa7, 0x56, 0x06, 0xad, 0x43, 0xa5,
	0xc7, 0x23, 0xea, 0x0e, 0xad, 0x52, 0xc3, 0xd8, 0xaa, 0x92, 0x04, 0xa1, 0xcd, 0x69, 0xaa, 0x56,
	0x59, 0x66, 0x9d, 0x6e, 0xc0, 0xc6, 0x14, 0x39, 0xab, 0x22, 0xcd, 0xb2, 0x42, 0xfc, 0x14, 0x6a,
	0x9a, 0x8e, 0x5e, 0xcb, 0x79, 0x6c, 0xf0, 0x1f, 0x03, 0xd6, 0x54, 0x11, 0x69, 0x17, 0x86, 0x5e,
	0x42, 0xa9, 0x3d, 0x48, 0xec, 0xcd, 0xe6, 0x63, 0xdd, 0xeb, 0x1c, 0x53, 0xe7, 0xc0, 0xe5, 0x5e,
	0xbf, 0xbd, 0x40, 0xa4, 0x03, 0xda, 0xc8, 0x26, 0x97, 0x1d, 0xaa, 0xb5, 0x17, 0x48, 0x46, 0x6a,
	0x9f, 0x40, 0x59, 0xba, 0x89, 0x15, 0x3a, 0x18, 0x71, 0xaa, 0x0b, 0x53, 0x40, 0x4c, 0xe0, 0xe9,
	0xd5, 0x15, 0xa3, 0x5c, 0xad, 0x50, 0x89, 0x68, 0x28, 0xec, 0xcf, 0x42, 0xee, 0xfa, 0xb2, 0xb7,
	0x25, 0xa2, 0xc0, 0x01, 0x4c, 0x18, 0x36, 0x7f, 0x8f, 0x5f, 0xb3, 0xa7, 0xce, 0x31, 0x7a, 0x0d,
	0x15, 0x25, 0x40, 0xf7, 0xc6, 0x3c, 0xd2, 0xcf, 0x6d, 0x3f, 0xbc, 0x83, 0xde, 0xb6, 0x81, 0xf6,
	0xa1, 0x2c, 0x4f, 0x33, 0xb2, 0x73, 0xef, 0xf5, 0x54, 0x8c, 0xbc, 0xc3, 0xbf, 0x37, 0x39, 0x8c,
	0xe8, 0xbe, 0x36, 0x9c, 0xba, 0xc5, 0xf6, 0xfa, 0xac, 0x42, 0x54, 0xf0, 0xa9, 0x22, 0x7f, 0x46,
	0xcf, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x2f, 0x7d, 0xc0, 0x13, 0x9c, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SearchServiceClient is the client API for SearchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchServiceClient interface {
	// external rpcs, for rpc clients
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SearchService_SearchClient, error)
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	DocCount(ctx context.Context, in *DocCountRequest, opts ...grpc.CallOption) (*DocCountResult, error)
}

type searchServiceClient struct {
	cc *grpc.ClientConn
}

func NewSearchServiceClient(cc *grpc.ClientConn) SearchServiceClient {
	return &searchServiceClient{cc}
}

func (c *searchServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (SearchService_SearchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_SearchService_serviceDesc.Streams[0], "/search.SearchService/Search", opts...)
	if err != nil {
		return nil, err
	}
	x := &searchServiceSearchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SearchService_SearchClient interface {
	Recv() (*StreamSearchResults, error)
	grpc.ClientStream
}

type searchServiceSearchClient struct {
	grpc.ClientStream
}

func (x *searchServiceSearchClient) Recv() (*StreamSearchResults, error) {
	m := new(StreamSearchResults)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *searchServiceClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/search.SearchService/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *searchServiceClient) DocCount(ctx context.Context, in *DocCountRequest, opts ...grpc.CallOption) (*DocCountResult, error) {
	out := new(DocCountResult)
	err := c.cc.Invoke(ctx, "/search.SearchService/DocCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchServiceServer is the server API for SearchService service.
type SearchServiceServer interface {
	// external rpcs, for rpc clients
	Search(*SearchRequest, SearchService_SearchServer) error
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	DocCount(context.Context, *DocCountRequest) (*DocCountResult, error)
}

func RegisterSearchServiceServer(s *grpc.Server, srv SearchServiceServer) {
	s.RegisterService(&_SearchService_serviceDesc, srv)
}

func _SearchService_Search_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SearchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SearchServiceServer).Search(m, &searchServiceSearchServer{stream})
}

type SearchService_SearchServer interface {
	Send(*StreamSearchResults) error
	grpc.ServerStream
}

type searchServiceSearchServer struct {
	grpc.ServerStream
}

func (x *searchServiceSearchServer) Send(m *StreamSearchResults) error {
	return x.ServerStream.SendMsg(m)
}

func _SearchService_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.SearchService/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SearchService_DocCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DocCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchServiceServer).DocCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/search.SearchService/DocCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchServiceServer).DocCount(ctx, req.(*DocCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "search.SearchService",
	HandlerType: (*SearchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _SearchService_Check_Handler,
		},
		{
			MethodName: "DocCount",
			Handler:    _SearchService_DocCount_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Search",
			Handler:       _SearchService_Search_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "search.proto",
}
